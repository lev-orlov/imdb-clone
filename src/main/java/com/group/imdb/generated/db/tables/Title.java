/*
 * This file is generated by jOOQ.
 */
package com.group.imdb.generated.db.tables;


import com.group.imdb.generated.db.Indexes;
import com.group.imdb.generated.db.Keys;
import com.group.imdb.generated.db.Public;
import com.group.imdb.generated.db.tables.records.TitleRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.11"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Title extends TableImpl<TitleRecord> {

    private static final long serialVersionUID = 208792378;

    /**
     * The reference instance of <code>public.title</code>
     */
    public static final Title TITLE = new Title();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TitleRecord> getRecordType() {
        return TitleRecord.class;
    }

    /**
     * The column <code>public.title.tconst</code>.
     */
    public final TableField<TitleRecord, String> TCONST = createField("tconst", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.title</code> table reference
     */
    public Title() {
        this(DSL.name("title"), null);
    }

    /**
     * Create an aliased <code>public.title</code> table reference
     */
    public Title(String alias) {
        this(DSL.name(alias), TITLE);
    }

    /**
     * Create an aliased <code>public.title</code> table reference
     */
    public Title(Name alias) {
        this(alias, TITLE);
    }

    private Title(Name alias, Table<TitleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Title(Name alias, Table<TitleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Title(Table<O> child, ForeignKey<O, TitleRecord> key) {
        super(child, key, TITLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TITLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TitleRecord> getPrimaryKey() {
        return Keys.TITLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TitleRecord>> getKeys() {
        return Arrays.<UniqueKey<TitleRecord>>asList(Keys.TITLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Title as(String alias) {
        return new Title(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Title as(Name alias) {
        return new Title(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Title rename(String name) {
        return new Title(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Title rename(Name name) {
        return new Title(name, null);
    }
}
