/*
 * This file is generated by jOOQ.
 */
package com.group.imdb.generated.db.tables;


import com.group.imdb.generated.db.Indexes;
import com.group.imdb.generated.db.Keys;
import com.group.imdb.generated.db.Public;
import com.group.imdb.generated.db.tables.records.NameBasicsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.11"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class NameBasics extends TableImpl<NameBasicsRecord> {

    private static final long serialVersionUID = 956976204;

    /**
     * The reference instance of <code>public.name_basics</code>
     */
    public static final NameBasics NAME_BASICS = new NameBasics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NameBasicsRecord> getRecordType() {
        return NameBasicsRecord.class;
    }

    /**
     * The column <code>public.name_basics.nconst</code>.
     */
    public final TableField<NameBasicsRecord, String> NCONST = createField("nconst", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.name_basics.primary_name</code>.
     */
    public final TableField<NameBasicsRecord, String> PRIMARY_NAME = createField("primary_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.name_basics.birth_year</code>.
     */
    public final TableField<NameBasicsRecord, Integer> BIRTH_YEAR = createField("birth_year", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.name_basics.death_year</code>.
     */
    public final TableField<NameBasicsRecord, Integer> DEATH_YEAR = createField("death_year", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.name_basics.primary_profession</code>.
     */
    public final TableField<NameBasicsRecord, String> PRIMARY_PROFESSION = createField("primary_profession", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.name_basics.known_for_titles</code>.
     */
    public final TableField<NameBasicsRecord, String> KNOWN_FOR_TITLES = createField("known_for_titles", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.name_basics</code> table reference
     */
    public NameBasics() {
        this(DSL.name("name_basics"), null);
    }

    /**
     * Create an aliased <code>public.name_basics</code> table reference
     */
    public NameBasics(String alias) {
        this(DSL.name(alias), NAME_BASICS);
    }

    /**
     * Create an aliased <code>public.name_basics</code> table reference
     */
    public NameBasics(Name alias) {
        this(alias, NAME_BASICS);
    }

    private NameBasics(Name alias, Table<NameBasicsRecord> aliased) {
        this(alias, aliased, null);
    }

    private NameBasics(Name alias, Table<NameBasicsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NameBasics(Table<O> child, ForeignKey<O, NameBasicsRecord> key) {
        super(child, key, NAME_BASICS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NAME_BASICS_PK, Indexes.NAME_BASICS_PRIMARY_NAME_INDEX, Indexes.PRIMARY_NAME_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NameBasicsRecord> getPrimaryKey() {
        return Keys.NAME_BASICS_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NameBasicsRecord>> getKeys() {
        return Arrays.<UniqueKey<NameBasicsRecord>>asList(Keys.NAME_BASICS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NameBasics as(String alias) {
        return new NameBasics(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NameBasics as(Name alias) {
        return new NameBasics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NameBasics rename(String name) {
        return new NameBasics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NameBasics rename(Name name) {
        return new NameBasics(name, null);
    }
}
